include limits.inc
include errno.inc
include stdio.inc
include string.inc
include fltintrn.inc
include assert.inc
include signal.inc

    T equ <@CStr>

.template assert fastcall

    lastResult errno_t ?

    .static assert {

        mov this.lastResult,0
        _set_errno(0)
        }
;;;;;;;;

    .static cmp32 :int_t, :int_t {

       .assert( _1 == _2 )
        }

    .static cmp64 :ptr, :ptr {

        mov rax,[_1]
        mov rbx,[_2]
       .assert( rax == rbx )
ifndef _WIN64
        mov eax,[_1+4]
        mov ebx,[_2+4]
       .assert( eax == ebx )
endif
        }

    .static cmpo :ptr, :ptr {

        mov rdi,_1
        mov rsi,_2
        mov rax,[rdi]
        mov rbx,[rsi]
        mov rdx,[rdi+size_t]
        mov rcx,[rsi+size_t]
       .assert( rax == rbx && rdx == rcx )
ifndef _WIN64
        mov eax,[edi+8]
        mov ebx,[esi+8]
        mov edx,[edi+12]
        mov ecx,[esi+12]
       .assert( eax == ebx && edx == ecx )
endif
        }

    .static __m :abs, :abs, :abs, :abs {
        local a, b, r
        .data
        align 16
        a oword _2
        ifnb <_4>
            b oword _3
            ifidn typeid(_4),<flt>
                r oword _4
            else
                r errno_t _4
            endif
            .code
            __&_1&(addr a, addr b)
        else
            r oword _3
            .code
            __&_1&(addr a)
        endif
        if sizeof(r) eq 16
            this.cmpo(addr a, addr r)
        else
            this.cmp32(eax, r)
        endif
        }

    .static mulq {
        this.__m(mulq, 0.0, 0.0, 0.0)
        this.__m(mulq, 0.0, 1.0, 0.0)
        this.__m(mulq, 0.0, -1.0, -0.0)
        this.__m(mulq, 2.0, 1.0, 2.0)
        this.__m(mulq, 1.1, 2.2, 2.4200000000000000000000000000000003)
        this.__m(mulq, 0.01, 0.1, 0.0010000000000000000000000000000000001)

        this.__m(mulq, 1.0001, 1000000.0002, 1000100.00020002)
        this.__m(mulq, 8.88888888888888888888888888888888e-4583, 1.e4096, 39B04B892AA10FE037723CDDFA146D1Fr);8.88888888888888888888888888888888e-487
        this.__m(mulq, 0489B0325A80EC580DF467361195C592r, 1.e4096, 39B04B892AA10FE037723CDDFA146D1Fr)
        }

    .static divq {
        this.__m(divq, 0.0, 0.0, NAN)
        this.__m(divq, 0.0, 1.0, 0.0)
        this.__m(divq, 0.0, -1.0, -0.0)
        this.__m(divq, 2.0, 1.0, 2.0)
        this.__m(divq, 1.1, 2.2, 0.5)
        this.__m(divq, 0.01, 0.1, 3FFB9999999999999999999999999999r);0.1)
        this.__m(divq, 66666.6, 2.0, 33333.3)
        this.__m(divq, 1.0001, 1000000.0002, 3FEB0C7659426EB346F3B91986814E5Er)
        this.__m(divq, 3FFF00068DB8BAC710CB295E9E1B089Ar, 4012E8480001A36E2EB1C432CA57A787r, 3FEB0C7659426EB346F3B91986814E5Er)
        this.__m(divq, 0489B0325A80EC580DF467361195C592r, 0AD84DBA0991A59D3FBC5BC702474388r, 39B04B892AA10FE037723CDDFA146D1Er)
        }

    .static addq {
        this.__m(addq, 0.0, 0.0, 0.0)
        this.__m(addq, 1.0, 0.0, 1.0)
        this.__m(addq, -1.0, 0.0, -1.0)
        this.__m(addq, 1.0, 1.0, 2.0)
        this.__m(addq, 1.1, 1.1, 2.2)
        this.__m(addq, 999999.0001, 1.0001, 4012E8480001A36E2EB1C432CA57A786r);1000000.0002)
        this.__m(addq, 0.09, 0.01, 3FFB9999999999999999999999999999r);0.1)
        }

    .static subq {
        this.__m(subq, 0.0, 0.0, 0.0)
        this.__m(subq, 1.0, 0.0, 1.0)
        this.__m(subq, -1.0, 0.0, -1.0)
        this.__m(subq, 1.0, 1.0, 0.0)
        this.__m(subq, 1.1, 1.1, 0.0)
        this.__m(subq, 10000000.0002, 999999.0001, 9000001.0001 )
        }

    .static cmpq {
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, 0.0, 0.0, 0 )
        this.__m(cmpq, 1.0, 0.0, 1 )
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, -0.0, 0.0, -1 )
        this.__m(cmpq, -1.0, -2.0, 1 )
        this.__m(cmpq, 0.0, -1.0, 1 )
        this.__m(cmpq, -1.0, -1.0, 0 )
        this.__m(cmpq, -9.9, -9.9, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775808.0, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775807.0, 1 )
        this.__m(cmpq, 9223372036854775807.0, 9223372036854775808.0, -1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775808.0, 0 )
        this.__m(cmpq, -9223372036854775807.0, -9223372036854775808.0, 1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775807.0, -1 )
        }

    ; Convert HALF, float, double, long double, int, __int64, string


    .static cvtq_h {
        this.__mqh( 0, 0.0, 0 )
        this.__mqh( 0, 1.0, 0x3C00 )
        this.__mqh( 0, 1.000976563, 0x3C01 )
        this.__mqh( 0, 0.0009765625, 0x1400 )
        this.__mqh( 0, -2.0, 0xC000 )
        this.__mqh( 0, 0.33325196, 0x3555 )
        this.__mqh( 0, 65504.0, 0x7BFF )
        this.__mqh( 0, 6.103515625e-05, 0x0400 )
        this.__mqh( 0, 6.097555161e-05, 0x03FE )
        this.__mqh( 0, 1.0/0.0, 0x7C00 )
        this.__mqh( 0, -1.0/0.0, 0x7C00 )
        this.__mqh( 0, 0.0/0.0, 0xFFFF )
        this.__mqh( ERANGE, 5.960464478e-08, 0x0001 )
        }
        .static __mqh :abs, :abs, :abs {
            local q, h
            .data
                align 16
                q real16 _2
                h dw _3
            .code
            __cvtq_h(addr h, addr q)
            mov ax,h
            mov bx,_3
            .assert( ax == bx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtq_ss {
        this.__mqss( 0.0, 0 )
        this.__mqss( 1.0, 0x3F800000 )
        this.__mqss( -2.0, 0xC0000000 )
        this.__mqss( 3.402823466e38, 3.402823466e38 )
        this.__mqss( 1.175494351e-38, 1.175494351e-38 )
        this.__mqss( -0.0, 0 )
        this.__mqss( 0.0/0.0, 0xFFC00000 )
        this.__mqss( 3.14159265358979323846264338327, 40490FDBr )
        }
        .static __mqss :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                r real4 0.0
                b dd _2
            .code
            __cvtq_ss(addr r, addr a)
            this.cmp32(r, b)
            }

    .static cvtq_sd {
        this.__mqsd( 3.14159265358979323846264338327, 400921FB54442D18r )
        }
        .static __mqsd :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real8 _2
                r real8 0.0
            .code
            __cvtq_sd(addr r, addr a)
            this.cmp64(addr r, addr b)
            }

    .static cvtq_ld {
        this.__mqld( 0.0 )
        this.__mqld( 1.0 )
        this.__mqld( 9.0 / 7.0 )
        this.__mqld( 3.14159265358979323846264338327 )
        }
        .static __mqld :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real10 _1
                r real10 0.0
            .code
            __cvtq_ld(addr r, addr a)
            this.cmp64(addr r, addr b)
            mov ax,word ptr r[8]
            mov bx,word ptr b[8]
            .assert( ax == bx )
            }

    .static cvtq_i32 {
        this.__mqi32( 0.0, 0)
        this.__mqi32( 0.10, 0)
        this.__mqi32( 1.0, 1)
        this.__mqi32( 2.0, 2)
        this.__mqi32( 0.99999999, 0)
        this.__mqi32( 7777777.0, 7777777)
        this.__mqi32( 2147483647.0, 2147483647)
        this.__mqi32( 2147483647.0, INT_MAX)
        this.__mqi32( -2147483648.0, INT_MIN)
        this.__mqi32( -1.0, UINT_MAX)
        this.__mqi32( -100000000000000000000.0, INT_MIN, ERANGE)
        this.__mqi32( 100000000000000000000.0, INT_MAX, ERANGE)
        }
        .static __mqi32 :abs, :abs, e:abs=<0> {
            local a
            .data
                align 16
                a real16 _1
            .code
            __cvtq_i32(addr a)
            mov ebx,_2
            .assert( eax == _2 )
            this.SetStatus()
            mov ebx,e
            .assert( eax == e )
            }

    .static cvtq_i64 {
        this.__mqi64( 0.0, 0)
        this.__mqi64( 0.10, 0)
        this.__mqi64( 1.0, 1)
        this.__mqi64( 2.0, 2)
        this.__mqi64( 0.99999999, 0)
        this.__mqi64( 7777777.0, 7777777)
        this.__mqi64( 9223372036854775807.0, 9223372036854775807)
        this.__mqi64( 9223372036854775807.0, _I64_MAX)
        this.__mqi64( -9223372036854775807.0, -9223372036854775807)
        this.__mqi64( 9223372036854775808.0, _I64_MAX, ERANGE)
        this.__mqi64( -9223372036854775808.0, _I64_MIN, ERANGE)
        this.__mqi64( -1.0, _UI64_MAX)
        }
        .static __mqi64 :abs, :abs, e:abs=<0> {
            local a, b, r
            .data
                align 16
                a real16 _1
                b qword _2
                r qword 0
            .code
            __cvtq_i64(addr a)
ifdef _AMD64_
            mov r,rax
else
            mov dword ptr r,eax
            mov dword ptr r[4],edx
endif
            this.cmp64(addr r, addr b)
            this.SetStatus()
            mov ebx,e
            .assert( eax == e )
            }

    .static cvth_q {
        this.__mhq( 0, 0.0, 0)
        this.__mhq( 0, 1.0, 0x3C00)
        this.__mhq( 0, 1.000976563, 0x3C01)
        this.__mhq( 0, 0.0009765625, 0x1400)
        this.__mhq( 0, -2.0, 0xC000)
        this.__mhq( 0, 0.33325196, 0x3555)
        this.__mhq( 0, 65504.0, 0x7BFF)
        this.__mhq( 0, 6.103515625e-05, 0x0400)
        this.__mhq( 0, 6.097555161e-05, 0x03FF)
        this.__mhq( 0, 5.960464478e-08, 0x0001)
        this.__mhq( 0, INFINITY, 0x7C00)
        this.__mhq( 0, 0FFFF0000000000000000000000000000r, 0xFC00)
        this.__mhq( 0, 1.0/0.0, 0x7C00)
        this.__mhq( 0, 0FFFF0000000000000000000000000000r, 0xFC00)
        this.__mhq( EDOM, 7FFF8000000000000000000000000000r, 0x7FFF)
        this.__mhq( EDOM, 7FFF8000000000000000000000000000r, 0xFFFF)
        }
        .static __mhq :abs, :abs, :abs {
            local b, q, w
            .data
                align 16
                q real16 _2
                b real16 0.0
                w dw _3
            .code
            __cvth_q(addr b, addr w)
            mov al,byte ptr b[11]
            mov edx,dword ptr b[12]
            mov bl,byte ptr q[11]
            mov ecx,dword ptr q[12]
            .assert( edx == ecx && al == bl )

            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtss_q {
        this.__mssq( 0,             0.0, 0.0 )
        this.__mssq( 0,             1.0, 0x3F800000 )
        this.__mssq( 0,            -2.0, 0xC0000000 )
        this.__mssq( 0,  3.402823466e38, 3.402823466e38 )
        this.__mssq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__mssq( 0,            -0.0, 0x80000000 )
        this.__mssq( EDOM, 7FFF8000000000000000000000000000r, 0x7F800000 )
        }
        .static __mssq :abs, :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dd _3
            .code
            __cvtss_q(addr b, addr r)
            mov eax,dword ptr b[12]
            mov edx,dword ptr a[12]
            .assert( eax == edx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtsd_q {
        this.__msdq( 0,             0.0, 0.0 )
        this.__msdq( 0,             1.0, 1.0 )
        this.__msdq( 0,            -2.0, -2.0 )
        this.__msdq( 0,  3.402823466e38, 3.402823466e38 )
        this.__msdq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__msdq( 0,            -0.0, -0.0 )
        this.__msdq( 0,       0.0 / 0.0, 0.0 / 0.0 )
        }
        .static __msdq :abs, :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _2
                b real16 0.0
                r dq _3
            .code
            __cvtsd_q(addr b, addr r)
            this.cmp64(addr b[8], addr a[8])
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtld_q {
        this.__mldq(             0.0, 0.0 )
        this.__mldq(             1.0, 1.0 )
        this.__mldq(            -2.0, -2.0 )
        this.__mldq(  3.402823466e38, 3.402823466e38 )
        this.__mldq( 1.175494351e-38, 1.175494351e-38 )
        this.__mldq(            -0.0, -0.0 )
        this.__mldq(       0.0 / 0.0, NAN )
        }
        .static __mldq :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real16 0.0
                r real10 _2
            .code
            __cvtld_q(addr b, addr r)
            this.cmp64(addr b[8], addr a[8])
            this.SetStatus()
            .assert( eax == 0 )
            }

    .static cvti32_q {
        this.__mi32q( 0, 0,                   0.0 )
        this.__mi32q( 0, 1,                   1.0 )
        this.__mi32q( 0, 2,                   2.0 )
        this.__mi32q( 0, 7777777,       7777777.0 )
        this.__mi32q( 0, 2147483647, 2147483647.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, UINT_MAX,           -1.0 )
        this.__mi32q( 0, INT_MIN,   -2147483648.0 )
        this.__mi32q( 0, INT_MAX,    2147483647.0 )
        }
        .static __mi32q :abs, :abs, :abs {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i long_t _2
            .code
            __cvti32_q(addr a, i)
            this.cmpo(addr a, addr b)
            this.SetStatus()
            mov ebx,_1
            .assert( eax == _1 )
            }

    .static cvti64_q {
        this.__mi64q( 0, 0,                                       0.0 )
        this.__mi64q( 0, 1,                                       1.0 )
        this.__mi64q( 0, 2,                                       2.0 )
        this.__mi64q( 0, 7777777,                           7777777.0 )
        this.__mi64q( 0, 9223372036854775807,   9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, -9223372036854775807, -9223372036854775807.0 )
        this.__mi64q( 0, _I64_MAX,              9223372036854775807.0 )
        this.__mi64q( 0, _I64_MIN,             -9223372036854775808.0 )
        this.__mi64q( 0, _UI64_MAX,                              -1.0 )
        }
        .static __mi64q :abs, :abs, :abs {
            local a, b, i
            .data
                align 16
                a real16 0.0
                b real16 _3
                i sqword _2
            .code
            __cvti64_q(addr a, i)
            this.cmpo(addr a, addr b)
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvta_q {
        this.__maq( addr T( "." ), 0.0, '.' )
        this.__maq( addr T( "-1.0e-0a" ), -1.0, 'a' )
        this.__maq( addr T( "-1e-0a" ), -1.0, 'a' )
        this.__maq( addr T( "123456789.0" ), 123456789.0, 0 )
        this.__maq( addr T( "1.e8192"), INFINITY, 0 )
        this.__maq( addr T( "3.14159265358979323846264338327"), 4000921FB54442D18469898CC516A159r, 0 )
        }
        .static __maq :abs, :abs, :abs {
            local a, b, eptr
            .data
                align 16
                a real16 _2
                b real16 0.0
                eptr string_t NULL
            .code
            __cvta_q(addr b, _1, addr eptr)
            mov rdx,eptr
            .assert( byte ptr [rdx] == _3 )
            this.cmpo(addr b, addr a)
            }

;;;;;;;;

    .static SetStatus :abs {
        ifnb <_1>
            mov eax,_1
        else
            mov eax,qerrno
            mov qerrno,0
        endif
        .if eax
            mov this.lastResult,eax
        .endif
        }
    .ends

    .code

main proc

    .new this:assert()

    signal(SIGSEGV, &__crtGeneralFailure)

    ; */+-

    this.mulq()
    this.divq()
    this.addq()
    this.subq()
    this.cmpq()

    this.cvtq_h()
    this.cvtq_ss()
    this.cvtq_sd()
    this.cvtq_ld()
    this.cvtq_i32()
    this.cvtq_i64()

    this.cvth_q()
    this.cvtss_q()
    this.cvtsd_q()
    this.cvtld_q()
    this.cvti32_q()
    this.cvti64_q()

    this.cvta_q()

    this.SetStatus()
    ret

main endp

    end
