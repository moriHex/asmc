; ATANQ.ASM--
;
; Copyright (c) The Asmc Contributors. All rights reserved.
; Consult your license regarding permissions and restrictions.
;
include quadmath.inc

ifdef _WIN64

    .data

atan_table real16 \
    0.0000000000000000000000000000000000000000,
    1.2435499454676143503135484916387102557317E-1, ; arctan(0.125)
    2.4497866312686415417208248121127581091414E-1,
    3.5877067027057222039592006392646049977698E-1,
    4.6364760900080611621425623146121440202854E-1,
    5.5859931534356243597150821640166127034645E-1,
    6.4350110879328438680280922871732263804151E-1,
    7.1882999962162450541701415152590465395142E-1,
    7.8539816339744830961566084581987572104929E-1,
    8.4415398611317100251784414827164750652594E-1,
    8.9605538457134395617480071802993782702458E-1,
    9.4200004037946366473793717053459358607166E-1,
    9.8279372324732906798571061101466601449688E-1,
    1.0191413442663497346383429170230636487744,
    1.0516502125483736674598673120862998296302,
    1.0808390005411683108871567292171998202703,
    1.1071487177940905030170654601785370400700,
    1.1309537439791604464709335155363278047493,
    1.1525719972156675180401498626127513797495,
    1.1722738811284763866005949441337046149712,
    1.1902899496825317329277337748293183376012,
    1.2068173702852525303955115800565576303133,
    1.2220253232109896370417417439225704908830,
    1.2360594894780819419094519711090786987027,
    1.2490457723982544258299170772810901230778,
    1.2610933822524404193139408812473357720101,
    1.2722973952087173412961937498224804940684,
    1.2827408797442707473628852511364955306249,
    1.2924966677897852679030914214070816845853,
    1.3016288340091961438047858503666855921414,
    1.3101939350475556342564376891719053122733,
    1.3182420510168370498593302023271362531155,
    1.3258176636680324650592392104284756311844,
    1.3329603993374458675538498697331558093700,
    1.3397056595989995393283037525895557411039,
    1.3460851583802539310489409282517796256512,
    1.3521273809209546571891479413898128509842,
    1.3578579772154994751124898859640585287459,
    1.3633001003596939542892985278250991189943,
    1.3684746984165928776366381936948529556191,
    1.3734007669450158608612719264449611486510,
    1.3780955681325110444536609641291551522494,
    1.3825748214901258580599674177685685125566,
    1.3868528702577214543289381097042486034883,
    1.3909428270024183486427686943836432060856,
    1.3948567013423687823948122092044222644895,
    1.3986055122719575950126700816114282335732,
    1.4021993871854670105330304794336492676944,
    1.4056476493802697809521934019958079881002,
    1.4089588955564736949699075250792569287156,
    1.4121410646084952153676136718584891599630,
    1.4152014988178669079462550975833894394929,
    1.4181469983996314594038603039700989523716,
    1.4209838702219992566633046424614466661176,
    1.4237179714064941189018190466107297503086,
    1.4263547484202526397918060597281265695725,
    1.4288992721907326964184700745371983590908,
    1.4313562697035588982240194668401779312122,
    1.4337301524847089866404719096698873648610,
    1.4360250423171655234964275337155008780675,
    1.4382447944982225979614042479354815855386,
    1.4403930189057632173997301031392126865694,
    1.4424730991091018200252920599377292525125,
    1.4444882097316563655148453598508037025938,
    1.4464413322481351841999668424758804165254,
    1.4483352693775551917970437843145232637695,
    1.4501726582147939000905940595923466567576,
    1.4519559822271314199339700039142990228105,
    1.4536875822280323362423034480994649820285,
    1.4553696664279718992423082296859928222270,
    1.4570043196511885530074841089245667532358,
    1.4585935117976422128825857356750737658039,
    1.4601391056210009726721818194296893361233,
    1.4616428638860188872060496086383008594310,
    1.4631064559620759326975975316301202111560,
    1.4645314639038178118428450961503371619177,
    1.4659193880646627234129855241049975398470,
    1.4672716522843522691530527207287398276197,
    1.4685896086876430842559640450619880951144,
    1.4698745421276027686510391411132998919794,
    1.4711276743037345918528755717617308518553,
    1.4723501675822635384916444186631899205983,
    1.4735431285433308455179928682541563973416, ; arctan(10.25)
    1.5707963267948966192313216916397514420986  ; pi/2

p0  real16 -4.283708356338736809269381409828726405572E1
p1  real16 -8.636132499244548540964557273544599863825E1
p2  real16 -5.713554848244551350855604111031839613216E1
p3  real16 -1.371405711877433266573835355036413750118E1
p4  real16 -8.638214309119210906997318946650189640184E-1
q0  real16 1.285112506901621042780814422948906537959E2
q1  real16 3.361907253914337187957855834229672347089E2
q2  real16 3.180448303864130128268191635189365331680E2
q3  real16 1.307244136980865800160844625025280344686E2
q4  real16 2.173623741810414221251136181221172551416E1

endif

    .code

atanq proc Q:real16

ifdef _WIN64

  local x:U128
  local k[4]:int_t, sign:int_t

    movaps  x,xmm0
    mov     eax,x.u32[12]
    xor     ecx,ecx
    shld    ecx,eax,1
    and     eax,0x7fffffff
    mov     k,eax
    mov     sign,ecx

    ; Check for IEEE special cases.

    .if ( eax >= 0x7fff0000 )

        ; NaN.

        and eax,0xffff
        or  eax,x.u32[0]
        or  eax,x.u32[4]
        or  eax,x.u32[8]

        .if ( eax )

            addq(xmm0, xmm0)
        .else

            ; Infinity.

            lea     rax,atan_table
            mov     rdx,[rax+83*16+8]
            rol     rcx,1
            or      rdx,rcx
            movq    xmm0,[rax+83*16]
            movq    xmm1,rdx
            shufpd  xmm0,xmm1,0
        .endif
        .return
    .endif

    .if ( eax <= 0x3fc50000 ) ; |x| < 2**-58

        ; Raise inexact.

        movaps  xmm1,xmm0
        movhlps xmm0,addq(1.0e4930, xmm1)
        movq    rax,xmm0
        movaps  xmm0,x
        rol     rax,1

        .if ( eax & 1 )
            .return
        .endif

        mov     eax,k
        mov     ecx,sign
    .endif

    .if ( eax >= 0x40720000 ) ; |x| > 2**115

        ; Saturate result to {-,+}pi/2

        lea     rax,atan_table
        mov     rdx,[rax+83*16+8]
        rol     rcx,1
        or      rdx,rcx
        movq    xmm0,[rax+83*16]
        movq    xmm1,rdx
        shufpd  xmm0,xmm1,0
       .return
    .endif

    .if ecx

        xor x.u8[15],0x80
    .endif

    .if ( eax >= 0x40024800 ) ; 10.25

        mov k,83
        movaps xmm5,divq(-1.0, x)
    .else

        ; Index of nearest table element.
        ; Roundoff to integer is asymmetrical to avoid cancellation when t < 0
        ; (cf. fdlibm).

        cvtqsi(addq(mulq(8.0, x), 0.25))
        mov qword ptr k,rax
        mov qword ptr k[8],rdx
        movaps xmm3,mulq(cvtsiq(&k), 0.125)

        ; Small arctan argument.
        movaps xmm2,addq(mulq(x, xmm3), 1.0)
        movaps xmm5,divq(subq(x, xmm3), xmm2)
    .endif

    movq    rax,xmm0
    movhlps xmm0,xmm0
    movq    rdx,xmm0
    or      rax,rdx
    .ifnz

        ; Arctan of small argument t.

        movaps xmm4,mulq(xmm5, xmm5)

        addq(mulq(p4,   xmm4), p3)
        addq(mulq(xmm0, xmm4), p2)
        addq(mulq(xmm0, xmm4), p1)
        addq(mulq(xmm0, xmm4), p0)
        movaps xmm2,xmm0

        addq(mulq(addq(q4, xmm4), xmm4), q3)
        addq(mulq(xmm0, xmm4), q2)
        addq(mulq(xmm0, xmm4), q1)
        addq(mulq(xmm0, xmm4), q0)

        movaps xmm3,xmm0
        addq(divq(mulq(mulq(xmm5, xmm4), xmm2), xmm3), xmm5)
    .endif

    ; arctan x = arctan u + arctan t

    mov eax,k
    shl eax,4
    lea rdx,atan_table
    addq(xmm0, [rdx+rax])
    .if sign
        pxor xmm0,{ -0.0 }
    .endif
else
    int 3
endif
    ret
atanq endp

    end
