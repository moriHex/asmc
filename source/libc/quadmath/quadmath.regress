include limits.inc
include errno.inc
include stdio.inc
include string.inc
include quadmath.inc
include assert.inc
include signal.inc

    T equ <@CStr>

.template assert fastcall

    lastResult errno_t ?

    .static assert {

        mov this.lastResult,0
        mov qerrno,0
        }
;;;;;;;;
ifdef _WIN64

    .static cmp32 :int_t, :int_t {
        .assert( _1 == _2 )
        }

    .static cmp64 :ptr, :ptr {
        mov rax,[_1]
        mov rbx,[_2]
        .assert( rax == rbx )
        }

    .static cmpo :ptr, :ptr {
        mov rax,[_1]
        mov rbx,[_2]
        mov rcx,[_1+size_t]
        mov rdx,[_2+size_t]
        .assert( rax == rbx && rcx == rdx )
        }

    .static __m :abs, :abs, :abs, :abs {
        local a, b, r
        .data
        align 16
        a real16 _2
        ifnb <_4>
            b real16 _3
            ifidn typeid(_4),<flt>
                r real16 _4
            else
                r errno_t _4
            endif
            .code
            _1(a, b)
            if sizeof(r) eq 16
                movaps a,xmm0
            endif
        else
            r real16 _3
            .code
            _1(a)
        endif
        if sizeof(r) eq 16
            this.cmpo(addr a, addr r)
        else
            this.cmp32(eax, r)
        endif
        }

    .static mulq {
        this.__m(mulq, 0.0, 0.0, 0.0)
        this.__m(mulq, 0.0, 1.0, 0.0)
        this.__m(mulq, 0.0, -1.0, -0.0)
        this.__m(mulq, 2.0, 1.0, 2.0)
        this.__m(mulq, 1.1, 2.2, 2.4200000000000000000000000000000003)
        this.__m(mulq, 0.01, 0.1, 0.001000000000000000000000000000000000);1)
        this.__m(mulq, 1.0001, 1000000.0002, 1000100.0002000199999999999999999999)
        this.__m(mulq, 8.88888888888888888888888888888888e-4583, 1.e4096, 39B04B892AA10FE037723CDDFA146D1Er)
        this.__m(mulq, 0489B0325A80EC580DF467361195C592r, 1.e4096, 39B04B892AA10FE037723CDDFA146D1Er)
        }

    .static divq {
        this.__m(divq, 0.0, 0.0, NAN)
        this.__m(divq, 0.0, 1.0, 0.0)
        this.__m(divq, 0.0, -1.0, -0.0)
        this.__m(divq, 2.0, 1.0, 2.0)
        this.__m(divq, 1.1, 2.2, 0.5)
        this.__m(divq, 0.01, 0.1, 3FFB9999999999999999999999999999r);0.1)
        this.__m(divq, 66666.6, 2.0, 33333.3)
        this.__m(divq, 1.0001, 1000000.0002, 3FEB0C7659426EB346F3B91986814E5Er)
        this.__m(divq, 3FFF00068DB8BAC710CB295E9E1B089Ar, 4012E8480001A36E2EB1C432CA57A787r, 3FEB0C7659426EB346F3B91986814E5Er)
        this.__m(divq, 0489B0325A80EC580DF467361195C592r, 0AD84DBA0991A59D3FBC5BC702474388r, 39B04B892AA10FE037723CDDFA146D1Er)
        }

    .static addq {
        this.__m(addq, 0.0, 0.0, 0.0)
        this.__m(addq, 1.0, 0.0, 1.0)
        this.__m(addq, -1.0, 0.0, -1.0)
        this.__m(addq, 1.0, 1.0, 2.0)
        this.__m(addq, 1.1, 1.1, 2.2)
        this.__m(addq, 999999.0001, 1.0001, 4012E8480001A36E2EB1C432CA57A786r);1000000.0002)
        this.__m(addq, 0.09, 0.01, 3FFB9999999999999999999999999999r);0.1)
        }

    .static subq {
        this.__m(subq, 0.0, 0.0, 0.0)
        this.__m(subq, 1.0, 0.0, 1.0)
        this.__m(subq, -1.0, 0.0, -1.0)
        this.__m(subq, 1.0, 1.0, 0.0)
        this.__m(subq, 1.1, 1.1, 0.0)
        this.__m(subq, 10000000.0002, 999999.0001, 9000001.0001 )
        }

    .static cmpq {
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, 0.0, 0.0, 0 )
        this.__m(cmpq, 1.0, 0.0, 1 )
        this.__m(cmpq, 0.0, 1.0, -1 )
        this.__m(cmpq, -0.0, 0.0, -1 )
        this.__m(cmpq, -1.0, -2.0, 1 )
        this.__m(cmpq, 0.0, -1.0, 1 )
        this.__m(cmpq, -1.0, -1.0, 0 )
        this.__m(cmpq, -9.9, -9.9, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775808.0, 0 )
        this.__m(cmpq, 9223372036854775808.0, 9223372036854775807.0, 1 )
        this.__m(cmpq, 9223372036854775807.0, 9223372036854775808.0, -1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775808.0, 0 )
        this.__m(cmpq, -9223372036854775807.0, -9223372036854775808.0, 1 )
        this.__m(cmpq, -9223372036854775808.0, -9223372036854775807.0, -1 )
        }

    ; Convert HALF, float, double, long double, int, __int64, string


    .static cvtqh {
        this.__mqh( 0, 0.0, 0 )
        this.__mqh( 0, 1.0, 0x3C00 )
        this.__mqh( 0, 1.000976563, 0x3C01 )
        this.__mqh( 0, 0.0009765625, 0x1400 )
        this.__mqh( 0, -2.0, 0xC000 )
        this.__mqh( 0, 0.33325196, 0x3555 )
        this.__mqh( 0, 65504.0, 0x7BFF )
        this.__mqh( 0, 6.103515625e-05, 0x0400 )
        this.__mqh( 0, 6.097555161e-05, 0x03FE )
        this.__mqh( 0, 1.0/0.0, 0x7C00 )
        this.__mqh( 0, -1.0/0.0, 0x7C00 )
        this.__mqh( 0, 0.0/0.0, 0xFFFF )
        this.__mqh( ERANGE, 5.960464478e-08, 0x0001 )
        }
        .static __mqh :abs, :abs, :abs {
            local q, h
            .data
                align 16
                q real16 _2
                h dd _3
            .code
            cvtqh(q)
            movd ebx,xmm0
            mov eax,h
            .assert( ax == bx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtqss {
        this.__mqss( 0.0, 0 )
        this.__mqss( 1.0, 0x3F800000 )
        this.__mqss( -2.0, 0xC0000000 )
        this.__mqss( 3.402823466e38, 3.402823466e38 )
        this.__mqss( 1.175494351e-38, 1.175494351e-38 )
        this.__mqss( -0.0, 0 )
        this.__mqss( 0.0/0.0, 0xFFC00000 )
        this.__mqss( 3.14159265358979323846264338327, 40490FDBr )
        }
        .static __mqss :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                r real4 0.0
                b dd _2
            .code
            cvtqss(a)
            movss r,xmm0
            this.cmp32(r, b)
            }

    .static cvtqsd {
        this.__mqsd( 3.14159265358979323846264338327, 400921FB54442D18r )
        }
        .static __mqsd :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                b real8 _2
                r real8 0.0
            .code
            cvtqsd(a)
            movsd r,xmm0
            this.cmp64(addr r, addr b)
            }

    .static cvtqld {
        this.__mqld( 0.0 )
        this.__mqld( 1.0 )
        this.__mqld( 9.0 / 7.0 )
        this.__mqld( 3.14159265358979323846264338327 )
        }
        .static __mqld :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                r real16 0.0
                b real10 _1
            .code
            cvtqld(a)
            movaps r,xmm0
            this.cmp64(addr r, addr b)
            mov ax,word ptr r[8]
            mov bx,word ptr b[8]
            .assert( ax == bx )
            }

    .static cvtqsi {
        this.__mqsi(                      0.0,                      0 )
        this.__mqsi(                      0.1,                      0 )
        this.__mqsi(                      0.49,                     0 )
        this.__mqsi(                      0.5,                      1 )
        this.__mqsi(                      1.0,                      1 )
        this.__mqsi(                      2.0,                      2 )
        this.__mqsi(                      0.99999999,               1 )
        this.__mqsi(                7777777.0,                7777777 )
        this.__mqsi(             2147483647.0,             2147483647 )
        this.__mqsi(            -2147483648.0,            -2147483648 )
        this.__mqsi(                     -1.0,                     -1 )
        this.__mqsi(    9223372036854775807.0,    9223372036854775807 )
        this.__mqsi(   -9223372036854775807.0,   -9223372036854775807 )
        this.__mqsi(    9223372036854775808.0,    9223372036854775808 )
        this.__mqsi(   -9223372036854775808.0,   -9223372036854775808 )
        this.__mqsi( -100000000000000000000.0, -100000000000000000000 )
        this.__mqsi(  100000000000000000000.0,  100000000000000000000 )
        }
        .static __mqsi :abs, :abs, e:abs=<0> {
            local a, b, r
            .data
                align 16
                a real16 _1
                b oword _2
                r oword 0
            .code
            cvtqsi(a)
            mov qword ptr r,rax
            mov qword ptr r[8],rdx
            this.cmpo(addr r, addr b)
            this.SetStatus()
            mov ebx,e
            .assert( eax == e )
            }


    .static cvttqsi {
        this.__mqsit(                      0.0,                      0 )
        this.__mqsit(                      0.1,                      0 )
        this.__mqsit(                      0.49,                     0 )
        this.__mqsit(                      0.5,                      0 )
        this.__mqsit(                      1.0,                      1 )
        this.__mqsit(                      2.0,                      2 )
        this.__mqsit(                      0.99999999,               0 )
        this.__mqsit(                7777777.0,                7777777 )
        this.__mqsit(             2147483647.0,             2147483647 )
        this.__mqsit(            -2147483648.0,            -2147483648 )
        this.__mqsit(                     -1.0,                     -1 )
        this.__mqsit(    9223372036854775807.0,    9223372036854775807 )
        this.__mqsit(   -9223372036854775807.0,   -9223372036854775807 )
        this.__mqsit(    9223372036854775808.0,    9223372036854775808 )
        this.__mqsit(   -9223372036854775808.0,   -9223372036854775808 )
        this.__mqsit( -100000000000000000000.0, -100000000000000000000 )
        this.__mqsit(  100000000000000000000.0,  100000000000000000000 )
        }
        .static __mqsit :abs, :abs, e:abs=<0> {
            local a, b, r
            .data
                align 16
                a real16 _1
                b oword _2
                r oword 0
            .code
            cvttqsi(a)
            mov qword ptr r,rax
            mov qword ptr r[8],rdx
            this.cmpo(addr r, addr b)
            this.SetStatus()
            mov ebx,e
            .assert( eax == e )
            }


    .static cvthq {
        this.__mhq( 0, 0.0, 0x0000)
        this.__mhq( 0, 1.0, 0x3C00)
        this.__mhq( 0, 1.000976563, 0x3C01)
        this.__mhq( 0, 0.0009765625, 0x1400)
        this.__mhq( 0, -2.0, 0x0C000)
        this.__mhq( 0, 0.33325196, 0x3555)
        this.__mhq( 0, 65504.0, 0x7BFF)
        this.__mhq( 0, 6.103515625e-05, 0x0400)
        this.__mhq( 0, 6.097555161e-05, 0x03FF)
        this.__mhq( 0, 5.960464478e-08, 0x0001)
        this.__mhq( 0, INFINITY, 0x7C00)
        this.__mhq( 0, 0FFFF0000000000000000000000000000r, 0xFC00)
        this.__mhq( 0, 1.0/0.0, 0x7C00)
        this.__mhq( 0, 0FFFF0000000000000000000000000000r, 0xFC00)
        this.__mhq( EDOM, 7FFF8000000000000000000000000000r, 0x7FFF)
        this.__mhq( EDOM, 7FFF8000000000000000000000000000r, 0xFFFF)
        }
        .static __mhq :abs, :abs, :abs {
            local q, h, x, r
            .data
                align 16
                q real16 _2
                r real16 0.0
                h label real2
                x dw _3
            .code
            cvthq(h)
            movaps r,xmm0
            mov eax,dword ptr r[12]
            mov ebx,dword ptr q[12]
            .assert( eax == ebx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtssq {
        this.__mssq( 0,             0.0, 0.0 )
        this.__mssq( 0,             1.0, 0x3F800000 )
        this.__mssq( 0,            -2.0, 0xC0000000 )
        this.__mssq( 0,  3.402823466e38, 3.402823466e38 )
        this.__mssq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__mssq( 0,            -0.0, 0x80000000 )
        this.__mssq( EDOM, 7FFF8000000000000000000000000000r, 0x7F800000 )
        }
        .static __mssq :abs, :abs, :abs {
            local q, a, r
            .data
                align 16
                q real16 _2
                r real16 0.0
                a dd _3
            .code
            cvtssq(a)
            movaps r,xmm0
            mov eax,dword ptr r[12]
            mov edx,dword ptr q[12]
            .assert( eax == edx )
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtsdq {
        this.__msdq( 0,             0.0, 0.0 )
        this.__msdq( 0,             1.0, 1.0 )
        this.__msdq( 0,            -2.0, -2.0 )
        this.__msdq( 0,  3.402823466e38, 3.402823466e38 )
        this.__msdq( 0, 1.175494351e-38, 1.175494351e-38 )
        this.__msdq( 0,            -0.0, -0.0 )
        this.__msdq( 0,       0.0 / 0.0, 0.0 / 0.0 )
        }
        .static __msdq :abs, :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _2
                r real16 0.0
                b real8 _3
            .code
            cvtsdq(b)
            movaps r,xmm0
            this.cmp64(addr r[8], addr a[8])
            this.SetStatus()
            .assert( eax == _1 )
            }

    .static cvtldq {
        this.__mldq(             0.0, 0.0 )
        this.__mldq(             1.0, 1.0 )
        this.__mldq(            -2.0, -2.0 )
        this.__mldq(  3.402823466e38, 3.402823466e38 )
        this.__mldq( 1.175494351e-38, 1.175494351e-38 )
        this.__mldq(            -0.0, -0.0 )
        this.__mldq(       0.0 / 0.0, NAN )
        }
        .static __mldq :abs, :abs {
            local a, b, r
            .data
                align 16
                a real16 _1
                r real16 0.0
                b real10 _2
            .code
            cvtldq(b)
            movaps r,xmm0
            this.cmp64(addr r[8], addr a[8])
            this.SetStatus()
            .assert( eax == 0 )
            }

    .static cvtsiq {
        this.__msiq( 0, 0,                                       0.0 )
        this.__msiq( 0, 1,                                       1.0 )
        this.__msiq( 0, 2,                                       2.0 )
        this.__msiq( 0, 7777777,                           7777777.0 )
        this.__msiq( 0, 9223372036854775807,   9223372036854775807.0 )
        this.__msiq( 0, -9223372036854775807, -9223372036854775807.0 )
        this.__msiq( 0, -9223372036854775808, -9223372036854775808.0 )
        this.__msiq( 0, -1,                                     -1.0 )
        }
        .static __msiq :abs, :abs, :abs {
            local r, b, i
            .data
                align 16
                r real16 0.0
                b real16 _3
                i oword _2
            .code
            cvtsiq(addr i)
            movaps r,xmm0
            this.cmpo(addr r, addr b)
            this.SetStatus()
            .assert( eax == _1 )
            }

endif
;;;;;;;;

    .static SetStatus :abs {
        ifnb <_1>
            mov eax,_1
        else
            mov eax,qerrno
            mov qerrno,0
        endif
        .if eax
            mov this.lastResult,eax
        .endif
        }
    .ends

    .code

main proc

    .new this:assert()

    signal(SIGSEGV, &__crtGeneralFailure)

    ; */+-
ifdef _WIN64
    this.mulq()
    this.divq()
    this.addq()
    this.subq()
    this.cmpq()

    this.cvtqh()
    this.cvtqss()
    this.cvtqsd()
    this.cvtqld()
    this.cvtqsi()
    this.cvttqsi()

    this.cvthq()
    this.cvtssq()
    this.cvtsdq()
    this.cvtldq()
    this.cvtsiq()
endif
    this.SetStatus()
    ret

main endp

    end
