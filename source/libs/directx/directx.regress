include assert.inc
include DirectXPackedVector.inc

.assert:on

PackedVectorToHalf macro i
    local r
    .data
    r real2 i
    .code
    XMConvertFloatToHalf(i)
    mov bx,r
    exitm<.assert( ax == bx )>
    endm

PackedVectorToFloat macro i
    local r
    .data
    r real4 i
    .code
    XMConvertHalfToFloat(i)
    mov ebx,r
    exitm<.assert( eax == ebx )>
    endm

    .data
    r2 real2 1.0,2.0,3.0,4.0
    r4 real4 1.0,2.0,3.0,4.0
    b2 real2 4 dup(?)
    b4 real4 4 dup(?)
    .code

main proc

    PackedVectorToHalf(0.0)
    PackedVectorToHalf(1.0)
    PackedVectorToHalf(2.0)
    PackedVectorToHalf(-2.0)
    PackedVectorToHalf(65504.0)
    PackedVectorToHalf(1.000976563)
    PackedVectorToHalf(0.0009765625)
    PackedVectorToHalf(0.33325196)
    PackedVectorToHalf(6.103515625e-05)

    PackedVectorToFloat(0.0)
    PackedVectorToFloat(1.0)
    PackedVectorToFloat(2.0)
    PackedVectorToFloat(-2.0)
    PackedVectorToFloat(65504.0)
    PackedVectorToFloat(1.000976563)
    PackedVectorToFloat(0.0009765625)
    PackedVectorToFloat(0.33325196)
    PackedVectorToFloat(6.103515625e-05)

    XMConvertHalfToFloatStream(&b4, 4, &r2, 2, 4)
    lea rsi,b4
    .assert( rsi == rax )
    .for( ecx = 0, rdx = &r4: ecx < 4: ecx++, rdx += 4 )
        lodsd
        .assert( eax == [rdx] )
    .endf

    XMConvertFloatToHalfStream(&b2, 2, &r4, 4, 4)
    lea rsi,b2
    .assert( rsi == rax )
    .for( ecx = 0, rdx = &r2: ecx < 4: ecx++, rdx += 2 )
        lodsw
        .assert( ax == [rdx] )
    .endf

    xor eax,eax
    ret

main endp


    end
